<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Powershell Basic example</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="example, powershell" /><meta name="Microsoft.Help.Id" content="9b3678d3-f63f-4192-92bb-e430907c8cc4" /><meta name="Description" content="PowerShell examples" /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Vovin.CmcLibNet, a .Net library for Commence RM<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/13d8bdcb-02fa-44f3-80db-d84941da7620.htm" title="Vovin.CmcLibNet, a .Net library for Commence RM" tocid="roottoc">Vovin.CmcLibNet, a .Net library for Commence RM</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/13d8bdcb-02fa-44f3-80db-d84941da7620.htm" title="Vovin.CmcLibNet documentation" tocid="13d8bdcb-02fa-44f3-80db-d84941da7620">Vovin.CmcLibNet documentation</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/092890cb-e367-4511-b649-8e0f057a12ca.htm" title="Teaser" tocid="092890cb-e367-4511-b649-8e0f057a12ca">Teaser</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/9b3678d3-f63f-4192-92bb-e430907c8cc4.htm" title="Powershell Basic example" tocid="9b3678d3-f63f-4192-92bb-e430907c8cc4">Powershell Basic example</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/15ef70da-4f25-401c-8336-bf4053e3dbac.htm" title="Powershell Export example" tocid="15ef70da-4f25-401c-8336-bf4053e3dbac">Powershell Export example</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/26126b67-d6a9-4ae9-95cb-309d32e261dc.htm" title="VBScript example" tocid="26126b67-d6a9-4ae9-95cb-309d32e261dc">VBScript example</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/551759d4-7595-29d9-745f-14d8e9379f92.htm" title="API Reference" tocid="8902777a-ec4f-48ac-97d2-ee7b0405bf80">API Reference</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn"><h1>Powershell Basic example</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>PowerShell examples</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Demonstrates</span></div><div id="ID0RBSection" class="collapsibleSection"><p>Usage of <strong>Vovin.CmcLibNet</strong> from <strong>PowerShell</strong>.</p><p>Some important differences between the Commence API and CmcLibNet.</p><p>Some advantages of CmcLibNet over using the 'raw' Commence API.</p></div><div class="collapsibleAreaRegion" id="Section1"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Basic usage</span></div><div id="ID2RBSection" class="collapsibleSection"><p>I will show you a few lines of PowerShell and talk you through it. You can find the complete script at the end of this page.</p><p>
          Intended audience:
        </p><ul><li><p>Administrators who want to use PowerShell to perform operations on Commence, such as nightly exports.</p></li><li><p>Developers familiar with Commence.</p></li></ul><p><strong>Disclaimer</strong>
          I did not speak PowerShell prior to writing this example (ironic, isn't it?).
          Usage of this code is at your own risk.
        </p><p><strong>Requirements for running this example</strong></p><ul><li><p>
              PowerShell must be configured to run (at least) .NET 4.5 code. There are several ways of doing that, not covered here.
            </p></li><li><p><strong>Commence</strong> must be running, and the <strong>Tutorial</strong> database must be open.</p></li></ul><p>Note: if you are using PowerShell as Administrator, you must start Commence as Administrator as well.</p><p><strong>Let's get started.</strong></p><p>
          First of all, it should be noted that you <em>already</em> communicate with Commence from PowerShell without any additional tools.
          See the <a href="092890cb-e367-4511-b649-8e0f057a12ca.htm">Teaser</a> section for an example.
        </p><p><strong>CmcLibNet</strong> is an assembly that exposes the entire Commence API via .NET and has some added functionality to boot.
        </p><p>
          In this example, assume <strong>Vovin.CmcLibNet.dll</strong> is just a file sitting on your computer.
          Obviously, you would have to put in your own pathname when you try this example.
          In this example, the default installation directory is used.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EA0KB0ABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EA0KB0ABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EA0KB0ABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">Add-Type -Path <span class="highlight-literal">"C:\Program Files\Vovin\Vovin.CmcLibNet\Vovin.CmcLibNet.dll"</span> # reference the assembly
$cmc = New-Object -TypeName Vovin.CmcLibNet.CommenceApp # <span class="highlight-keyword">get</span> a reference to Commence via Vovin.CmcLibNet
# Get-Member nicely returns the methods and properties of the $cmc <span class="highlight-keyword">object</span>.
$cmc | Get-Member
# Output name and path of the database
$cmc.Name
$cmc.Path</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EA0KB0ABAAA");</script><p>
          Let's do something more useful and illustrate some features of CmcLibNet as we go along.
        </p><p>
          In the above example, we talked to the Commence application.
          That's nice, but in almost all cases you will want to do something with the Commence database.
          All database functionality in CmcLibNet is exposed by the <a href="0c287d37-3e39-b565-3606-633843ec7f1a.htm">ICommenceDatabase</a> interface.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EA0HB0ABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EA0HB0ABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EA0HB0ABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">$db = New-Object -TypeName Vovin.CmcLibNet.Database.CommenceDatabase</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EA0HB0ABAAA");</script><p>
          Note that while you can get references to the <span class="code">CommenceApp</span> and <span class="code">CommenceDatabase</span> types directly,
          they are also part of the top-level type <span class="code">Vovin.CmcLibNet.Application</span>
          So if you prefer a more parent-child like approach to your code, the following would also work.
          I have commented out the code because the example is built like a real-life script.
          The complete code can be found at the end of this page.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EA0FB0ABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EA0FB0ABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EA0FB0ABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"># Example of alternative way to <span class="highlight-keyword">get</span> types
# $cmclibnet = New-Object -TypeName Vovin.CmcLibNet.Application
# $cmc = $cmclibnet.CommenceApp # <span class="highlight-keyword">get</span> reference to CommenceApp
# $db = $cmclibnet.Database # <span class="highlight-keyword">get</span> reference to CommenceDatabase</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EA0FB0ABAAA");</script><p>
          Let's say we want a list of all the e-mail addresses of Contacts who work for Commence Corporation.
          Assume we want that list to be exported to an <strong>Xml</strong> file. Wait, what? Commence can do that?
          Nope, but CmcLibNet can. It can also export to <strong>Json</strong>, I'll show that later.
          Remember, this example assumes Commence is running with the <strong>Tutorial</strong> database opened.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EA0DB0ABAAA_tab1" class="codeSnippetContainerTabSingle">PowerShell</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EA0DB0ABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EA0DB0ABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EA0DB0ABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">$cursor = $db.GetCursor(<span class="highlight-literal">"Contact"</span>)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EA0DB0ABAAA");</script><p>
          Let's talk about that line some more. If you are familiar with Commence API scripting, a few things may catch your attention.
          In VBScript, chances are you would have written something like <span class="code">cursor = db.GetCursor(0, CategoryOrViewName, 0)</span>
          In our case, we did not supply any parameters with the <span class="code">GetCursor</span> command.
          That is because the GetCursor method has several overloads, meaning several ways of calling it.
          The above line is equivalent with <span class="code">cmc.GetCursor(0,"Contact",0)</span>, just shorter.
          If you want to, you <em>can</em> still supply parameters, just use another overload.
          For example, getting a cursor on a view would be written as <span class="code">cmc.GetCursor("MyViewName", 1, 0)</span><strong>Important:</strong> Notice the difference in parameter order. In .NET, optional parameters must come last and both the
          <span class="code">1</span> and <span class="code">0</span> are optional.
        </p><p>
          Okay, now we have a cursor reference. Let's check how many items we have:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EA0AB0ABAAA_tab1" class="codeSnippetContainerTabSingle">PowerShell</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EA0AB0ABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EA0AB0ABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EA0AB0ABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">$cursor.RowCount</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EA0AB0ABAAA");</script><p>
          This should return the number of items in the <strong>Contact</strong> category.
        </p><p>
          We want only contacts connected to "Commence Corporation", so we are going to have to filter the cursor.
          You <em>can</em> still do that with the dreaded <span class="code">.SetFilter("[ViewFilter(Very-Long-String-With-Mysterious-Parameters)]")</span> syntax,
          but the preferred way of filtering in CmcLibNet uses a different mechanism.
          In CmcLibNet, a <span class="code">Filter</span> is just an object with properties.
          This may sound mysterious, so let's just show how that works.
        </p><p>We will create a filter of type CTI (<em>Connection To Item</em>) and make it the first filter.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EA3ABAAA_tab1" class="codeSnippetContainerTabSingle">PowerShell</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EA3ABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EA3ABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EA3ABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">$filter = $cursor.Filters.Add(<span class="highlight-number">1</span>, <span class="highlight-namespace">[Vovin.CmcLibNet.Database.FilterType]</span>::ConnectionToItem)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EA3ABAAA");</script><p>Another line that will look completely crazy to people who have used the Commence API before.</p><p>
          Let's compare it to the 'classic' way of doing it. In VBScript, you would have written something along the lines of:
          <span class="code">result = cursor.SetFilter("[ViewFilter(1,CTI,,Relates to, Account, Commence Corporation)]", 0)</span>
          This is the simplest of all filters and even after over 2 decades, I still struggle with that syntax.<br />
          In essence, it calls a method "<span class="code">Setfilter()</span> to which a <span class="parameter">string parameter</span>
          is passed that describes a DDE request <em>ViewFilter</em> and it's impossible to remember parameters.
          CmcLibNet was designed to do away with that.
        </p><p>Let's inspect that <span class="code">$filter</span> thingie:
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAYABAAA_tab1" class="codeSnippetContainerTabSingle">PowerShell</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAYABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAYABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAYABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">$filter | gm</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAYABAAA");</script><p>Notice that it is an object with properties that match the parameters that you can pass to the <strong>DDE ViewFilter request</strong>.
        </p><p>When you create a <span class="code">Filter</span> of a certain type in CmcLibNet, it will contain the properties pertaining to that particular filtertype.</p><p>Let's see some of properties that belong to our 'CTI' filter:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAUABAAA_tab1" class="codeSnippetContainerTabSingle">PowerShell</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAUABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAUABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAUABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">$filter.Connection = <span class="highlight-literal">"Relates to"</span> <span class="highlight-comment"># IMPORTANT: connection names in Commence are case-sensitive!</span>
$filter.Category = <span class="highlight-literal">"Account"</span> <span class="highlight-comment"># Category name</span>
$filter.Item = <span class="highlight-literal">"Commence Corporation"</span> <span class="highlight-comment"># Item name. Ideally, you should use a clarified itemname, or, alternatively, set the ClarifySeparator and ClarifyValue properties.</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAUABAAA");</script><p>There are many more properties you can set, but these suffice for this example.</p><p>
          We have defined our filter, but it isn't enforced yet. For that, you have to call the <span class="code">Apply()</span> method of the <span class="code">Filters</span> collection.
          The <span class="code">Apply()</span> method returns the cursor's rowcount after filtering, or throws an error when something goes wrong.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EARABAAA_tab1" class="codeSnippetContainerTabSingle">PowerShell</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EARABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EARABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EARABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">$cursor.Filters.Apply()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EARABAAA");</script><p>
          We now have a cursor containing contacts connected to Commence Corporation.
          Let's assume we only want the name and e-mail fields.
          Setting fields on a cursor works in much the same way as using the Commenc API
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAPABAAA_tab1" class="codeSnippetContainerTabSingle">PowerShell</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAPABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAPABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAPABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">$cursor.SetColumn(<span class="highlight-number">0</span>, <span class="highlight-literal">"contactKey"</span>, <span class="highlight-comment">[Vovin.CmcLibNet.CmcOptionFlags]::Default) # [Vovin.CmcLibNet.CmcOptionFlags]</span>::Default is <span class="highlight-number">0</span>, you could use <span class="highlight-number">0</span>. Harder to remember though.
$cursor.SetColumn(<span class="highlight-number">1</span>, <span class="highlight-literal">"emailBusiness"</span>, <span class="highlight-number">0</span>) <span class="highlight-comment"># Again, note that you can either provide the native value of the CmcOptionFlags enum (0), or just pull the value from the enum (recommended!)</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAPABAAA");</script><p>
          You can also set columns in batch by using <span class="code">SetColums()</span>. You can use either method, but <strong>do not</strong> intermix single and batch mode!<br />
          The same goes for <span class="code">SetRelatedColumns</span>. Also note that <span class="code">SetRelatedColumns</span> should come <strong>after</strong> SetColumns. That is just how Commence expects things.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EANABAAA_tab1" class="codeSnippetContainerTabSingle">PowerShell</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EANABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EANABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EANABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-literal"># $cursor.SetColumns("contactKey", "emailBusiness") # commented out because we already set them.</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EANABAAA");</script><p>Check if we actually have our two columns as expected:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EALABAAA_tab1" class="codeSnippetContainerTabSingle">PowerShell</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EALABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EALABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EALABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">$cursor.ColumnCount <span class="highlight-comment"># should return 2</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EALABAAA");</script><p>
          Let's export the data. Wait, you can export a cursor? Yes, and it is very simple, too.
        </p><p>The default export format is Xml. No matter what file extension you use, you get Xml.</p><p>For a more in-depth look at the CmcLibNet <a href="b12f100e-8104-47e2-e9dd-89751a7815c3.htm">IExportEngine</a> options, see the export example.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAHABAAA_tab1" class="codeSnippetContainerTabSingle">PowerShell</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAHABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAHABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAHABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">$cursor.ExportToFile(<span class="highlight-literal">"C:\temp\cursor.xml"</span>) <span class="highlight-comment"># adjust to your system accordingly</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAHABAAA");</script><p>While not necessary in -say- a nightly export script, it is good practice to close the cursor when no longer needed.</p><p>This especially important when you call CmcLibNet from COM (which we don't here), but it may also prevent some unexpected behaviour when -for example- trying out things in PowerShell ISE.</p><p>The <span class="code">Close()</span> method explicitly releases references to Commence.
        If you do not call it, the commence.exe process may keep running even if you think Commence was closed.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EADABAAA_tab1" class="codeSnippetContainerTabSingle">PowerShell</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EADABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">$cursor.Close()
<span class="highlight-comment"># Alternatively you can also call Close() on the database in this example. </span>
<span class="highlight-comment"># However, that assumes that no other cursors or other COM-references are still in use,</span>
<span class="highlight-comment"># because it will close *all* COM-references created by this $db object</span>
$db.Close() <span class="highlight-comment"># closes all COM-references created by $db</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADABAAA");</script><p>That concludes this example. We barely scratched the surface, but I hope you got an idea of what CmcLibNet can do.</p><p>Below is the complete script used in this example.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAABAAA_tab1" class="codeSnippetContainerTabSingle">PowerShell</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-pshell-cmdlet">Add-Type</span> -Path <span class="highlight-literal">"C:\Program Files\Vovin\Vovin.CmcLibNet\Vovin.CmcLibNet.dll"</span>
$cmc = <span class="highlight-pshell-cmdlet">New-Object</span> -TypeName Vovin.CmcLibNet.CommenceApp
$cmc | <span class="highlight-pshell-cmdlet">Get-Member</span>
$cmc.Name
$cmc.Path
$db = <span class="highlight-pshell-cmdlet">New-Object</span> -TypeName Vovin.CmcLibNet.Database.CommenceDatabase
$cursor = $db.GetCursor(<span class="highlight-literal">"Contact"</span>)
$cursor.RowCount
$filter = $cursor.Filters.Add(<span class="highlight-number">1</span>, <span class="highlight-namespace">[Vovin.CmcLibNet.Database.FilterType]</span>::ConnectionToItem)
$filter |gm <span class="highlight-comment"># gm is just short for Get-Member, btw</span>
$filter.Connection = <span class="highlight-literal">"Relates to"</span> <span class="highlight-comment"># IMPORTANT: connection names are case-sensitive!</span>
$filter.Category = <span class="highlight-literal">"Account"</span> <span class="highlight-comment"># Category name</span>
$filter.Item = <span class="highlight-literal">"Commence Corporation"</span> <span class="highlight-comment"># Item name. Ideally, you should use a clarified itemname, or, alternatively, set the ClarifySeparator and ClarifyValue properties.</span>
$cursor.Filters.Apply()
$cursor.SetColumn(<span class="highlight-number">0</span>, <span class="highlight-literal">"contactKey"</span>, <span class="highlight-namespace">[Vovin.CmcLibNet.CmcOptionFlags]</span>::Default)
$cursor.SetColumn(<span class="highlight-number">1</span>, <span class="highlight-literal">"emailBusiness"</span>, <span class="highlight-number">0</span>) <span class="highlight-comment"># Again, note that you can either provide the native value of the CmcOptionFlags enum (0), or just pull the value from the enum (recommended!)</span>
$cursor.ColumnCount
$cursor.ExportToFile(<span class="highlight-literal">"E:\temp\cursor.xml"</span>)
<span class="highlight-comment"># optional but good practice</span>
$cursor.Close() <span class="highlight-comment"># make sure cursor is closed</span>
<span class="highlight-comment"># or simply release all COM-references created by $db</span>
$db.Close()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABAAA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="15ef70da-4f25-401c-8336-bf4053e3dbac.htm">Powershell export example</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="http://www.vovin.nl" target="_blank">Arno van Boven - Vovin IT Services</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:cmclibnet%40vovin.nl?Subject=Vovin.CmcLibNet,%20a%20.Net%20library%20for%20Commence%20RM">feedback</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>